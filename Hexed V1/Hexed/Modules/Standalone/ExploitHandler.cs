using Hexed.HexedServer;
using Hexed.Wrappers;
using System.Collections;
using UnityEngine;
using ExitGames.Client.Photon;
using System.Diagnostics;
using VRC.Udon;
using VRC.SDKBase;
using Hexed.Extensions;

namespace Hexed.Modules.Standalone
{
    internal class ExploitHandler
    {
        public static bool isVoiceDistortionEnabled = false;
        public static IEnumerator VoiceDistortion()
        {
            isVoiceDistortionEnabled = true;

            //byte[] Bytes = new byte[] { 97, 0, 0, 0, 73, 65, 118, 70, 187, 134, 59, 0, 248, 125, 232, 192, 92, 160, 82, 254, 48, 228, 30, 187, 149, 196, 177, 215, 140, 223, 127, 209, 66, 60, 0, 226, 53, 180, 176, 97, 104, 4, 248, 238, 195, 2, 44, 185, 182, 68, 94, 114, 205, 181, 150, 56, 232, 126, 247, 155, 123, 172, 108, 98, 80, 56, 113, 89, 160, 2, 221 };
            byte[] Bytes = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 246, 25, 25, 0, 248, 202, 200, 211, 204, 201, 212, 214, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

            Buffer.BlockCopy(BitConverter.GetBytes(GameHelper.VRCNetworkingClient.GetCurrentPlayer().ActorID()), 0, Bytes, 0, 4);

            while (isVoiceDistortionEnabled)
            {
                if (GameUtils.IsInWorld())
                {
                    Buffer.BlockCopy(BitConverter.GetBytes(GameHelper.VRCNetworkingClient.prop_LoadBalancingPeer_0.ServerTimeInMilliSeconds), 0, Bytes, 4, 4);
                    Bytes[22] = (byte)EncryptUtils.Random.Next(byte.MinValue, byte.MaxValue);
                    Bytes[23] = (byte)EncryptUtils.Random.Next(byte.MinValue, byte.MaxValue);
                    Bytes[24] = (byte)EncryptUtils.Random.Next(byte.MinValue, byte.MaxValue);
                    Bytes[25] = (byte)EncryptUtils.Random.Next(byte.MinValue, byte.MaxValue);
                    Bytes[26] = (byte)EncryptUtils.Random.Next(byte.MinValue, byte.MaxValue);
                    PhotonHelper.OpRaiseEvent(1, Bytes, default, 1, DeliveryMode.UnreliableUnsequenced);
                }
                yield return new WaitForSeconds(0.1f);
            }
        }

        public static bool isPortalKOSEnabled = false;
        public static IEnumerator PortalKOS(VRC.Player player)
        {
            isPortalKOSEnabled = true;

            string PortalID = null;

            new VRC.Core.ApiWorldInstance() { id = $"wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc:{EncryptUtils.RandomStringNumber(5)}" }.Fetch(new Action<VRC.Core.ApiContainer>((container) =>
            {
                VRC.Core.ApiModelContainer<VRC.Core.ApiWorldInstance> apiWorldInstance = new();
                apiWorldInstance.setFromContainer(container);
                VRC.Core.ApiWorldInstance World = container.Model.Cast<VRC.Core.ApiWorldInstance>();

                if (World != null) PortalID = World.shortName;
            }));

            while (PortalID == null) yield return new WaitForEndOfFrame();

            while (isPortalKOSEnabled && player != null && GameUtils.IsInWorld())
            {
                PhotonHelper.RaisePortalCreate(PortalID, player.transform.position, -1);
                yield return new WaitForSeconds(3f);
            }
        }

        public static void ListenPlayer(VRC.Player player, bool state)
        {
            if (state)
            {
                //player.GetVRCPlayerApi().SetVoiceDistanceNear(float.MaxValue);
                player.GetVRCPlayerApi().SetVoiceDistanceFar(float.PositiveInfinity);
            }
            else
            {
                player.GetVRCPlayerApi().SetVoiceDistanceFar(25); // player.GetVRCPlayer().prop_PlayerAudioManager_0.field_Private_Single_1
            }
        }

        public static void RepeatVoiceEvents(byte[] Data)
        {
            if (Data == null) return;

            Buffer.BlockCopy(BitConverter.GetBytes(GameHelper.VRCNetworkingClient.GetCurrentPlayer().ActorID()), 0, Data, 0, 4);
            Buffer.BlockCopy(BitConverter.GetBytes(GameHelper.VRCNetworkingClient.prop_LoadBalancingPeer_0.ServerTimeInMilliSeconds), 0, Data, 4, 4);

            PhotonHelper.OpRaiseEvent(1, Data, default, 1, DeliveryMode.UnreliableUnsequenced);
        }

        public static bool isStaticChatboxEnabled = false;
        public static IEnumerator StaticChatbox(string Message)
        {
            if (Message == null || isStaticChatboxEnabled) yield break;

            isStaticChatboxEnabled = true;

            while (isStaticChatboxEnabled)
            {
                if (GameUtils.IsInWorld()) PhotonHelper.RaiseChatMessage(Message);

                yield return new WaitForSeconds(3f);
            }
        }

        public static bool isSpotifyChatboxEnabled = false;
        public static IEnumerator SpotifyChatbox()
        {
            if (isSpotifyChatboxEnabled) yield break;

            isSpotifyChatboxEnabled = true;

            while (isSpotifyChatboxEnabled)
            {
                if (GameUtils.IsInWorld())
                {
                    Process Spotify = Process.GetProcessesByName("Spotify").FirstOrDefault(p => !string.IsNullOrWhiteSpace(p.MainWindowTitle));

                    if (Spotify != null && Spotify.MainWindowTitle != null && Spotify.MainWindowTitle != "Spotify" && Spotify.MainWindowTitle != "Spotify Premium") PhotonHelper.RaiseChatMessage($"🎵 {Spotify.MainWindowTitle}");
                }

                yield return new WaitForSeconds(3f);
            }

            isSpotifyChatboxEnabled = false;
        }

        public static bool isAlwaysTypingEnabled = false;
        public static IEnumerator AlwaysTyping()
        {
            if (isAlwaysTypingEnabled) yield break;

            isAlwaysTypingEnabled = true;

            while (isAlwaysTypingEnabled)
            {
                if (GameUtils.IsInWorld()) PhotonHelper.RaiseTypingIndicator(0);
                yield return new WaitForSeconds(1f);
            }

            isAlwaysTypingEnabled = false;
        }

        public static bool isUdonSpamming = false;
        public static IEnumerator UdonSpam(VRC.Player player)
        {
            if (isUdonSpamming) yield break;

            isUdonSpamming = true;

            UdonBehaviour[] allEvents = UnityEngine.Object.FindObjectsOfType<UdonBehaviour>();

            while (isUdonSpamming && player != null && GameUtils.IsInWorld())
            {
                foreach (UdonBehaviour behaviour in allEvents)
                {
                    foreach (string UdonEvent in behaviour._eventTable.Keys)
                    {
                        if (!UdonEvent.StartsWith("_") && player != null) PhotonHelper.SendUdonRPC(behaviour, UdonEvent, player);
                    }
                }

                yield return new WaitForSeconds(1f);
            }

            isUdonSpamming = false;
        }

        public static bool isCameraSounds = false;
        public static IEnumerator CameraSounds(VRC.Player player)
        {
            if (isCameraSounds) yield break;

            isCameraSounds = true;

            while (isCameraSounds && player != null && GameUtils.IsInWorld())
            {
                GameHelper.CurrentVRCPlayer.field_Public_UserCameraIndicator_0.transform.position = player.transform.position;
                PhotonHelper.SendRPC(VRC_EventHandler.VrcEventType.SendRPC, "", false, VRC_EventHandler.VrcBooleanOp.Unused, GameHelper.CurrentVRCPlayer.field_Public_UserCameraIndicator_0.gameObject, null, "PhotoCapture", 0, 0, null, VRC_EventHandler.VrcBroadcastType.AlwaysUnbuffered, 0);
                yield return new WaitForSeconds(0.3f);
            }

            isCameraSounds = false;
        }

        public static bool isCollapse = false;
        public static IEnumerator Collapse(VRC.Player player)
        {
            isCollapse = true;

            var pickups = ItemHelper.GetAllPickups().Where(x => x.GetComponent<Collider>() != null && x.GetComponent<Collider>().enabled || x.GetComponentInChildren<Collider>() != null && x.GetComponentInChildren<Collider>().enabled);

            while (isCollapse && player != null && GameUtils.IsInWorld())
            {
                for (int i = 0; i < 20; i++)
                {
                    foreach (var pickup in pickups)
                    {
                        float yOffset = (i - 1) * 0.05f;

                        ItemHelper.TakeOwnershipIfNecessary(pickup.gameObject);
                        pickup.transform.position = player.transform.position + new Vector3(0, -0.1f + yOffset, 0);
                        pickup.transform.rotation = Quaternion.Euler(0, 0, 0);
                    }

                    yield return new WaitForEndOfFrame();
                }

                yield return new WaitForSeconds(0.1f);

                foreach (var pickup in pickups)
                {
                    ItemHelper.TakeOwnershipIfNecessary(pickup.gameObject);
                    pickup.transform.position = UnityUtils.InfPosition.INFBypass;
                    pickup.transform.rotation = Quaternion.Euler(0, 0, 0);
                }

                yield return new WaitForSeconds(0.1f);
            }

            isCollapse = false;
        }

        public static bool isMemoryViolation = false;
        public static IEnumerator MemoryViolation()
        {
            isMemoryViolation = true;

            while (isMemoryViolation && GameUtils.IsInWorld())
            {
                UdonBehaviour[] allEvents = UnityEngine.Object.FindObjectsOfType<UdonBehaviour>();

                foreach (UdonBehaviour behaviour in allEvents)
                {
                    ItemHelper.TakeOwnershipIfNecessary(behaviour.gameObject);
                    behaviour.SyncMethod = Networking.SyncType.Continuous;

                    yield return new WaitForEndOfFrame(); // Delay to not cause unusual client behaviour
                }

                yield return new WaitForSeconds(1f); // Delay to not cause unusual client behaviour
            }

            isMemoryViolation = false;
        }
    }
}
