using BestHTTP.SecureProtocol.Org.BouncyCastle.Crypto.Tls;
using ExitGames.Client.Photon;
using Hexed.Core;
using Hexed.Extensions;
using Hexed.HexedServer;
using Hexed.Modules.Standalone;
using Hexed.UIApi;
using Hexed.Wrappers;
using System;
using UnityEngine;
using VRC.SDKBase;
using static VRC.SDKBase.VRC_EventHandler;

namespace Hexed.CustomUI.QM
{
    internal class ExploitMenu
    {
        private static QMMenuPage ExploitPage;
        public static void Init()
        {
            ExploitPage = new("Exploits");

            QMSingleButton OpenMenu = new(MainMenu.ClientPage, 1.5f, 1, "Exploits", ExploitPage.OpenMe, "Exploit Options", ButtonAPI.ButtonSize.Default, UnityUtils.GetSprite("Exploits"));

            new QMToggleButton(ExploitPage, 1, 0, "Infinity \nPosition", delegate
            {
                InternalSettings.InfinityPosition = true;
            }, delegate
            {
                InternalSettings.InfinityPosition = false;
            }, "Teleport your Player to Infinity");

            new QMToggleButton(ExploitPage, 2, 0, "Big \nAvatar", delegate
            {
                InternalSettings.BigAvatar = true;
                VRC.Core.APIUser.CurrentUser.ReloadAvatar();
            }, delegate
            {
                InternalSettings.BigAvatar = false;
                VRC.Core.APIUser.CurrentUser.ReloadAvatar();
            }, "Scale your Avatar to the maximum");

            new QMToggleButton(ExploitPage, 3, 0, "Always \nTyping", delegate
            {
                ExploitHandler.AlwaysTyping().Start();
            }, delegate
            {
                ExploitHandler.isAlwaysTypingEnabled = false;
            }, "Always send a typing Indicator");

            new QMToggleButton(ExploitPage, 4, 0, "Loud \nMic", delegate
            {
                USpeaker.field_Internal_Static_Single_1 = float.MaxValue;
            }, delegate
            {
                USpeaker.field_Internal_Static_Single_1 = 1f;
            }, "Everyone hears you very Loud");

            QMSelectButton ChatboxMenu = new(ExploitPage, 1, 1, "Custom \nChatbox", "Send custom Chatbox messages", InternalSettings.ChatBox, 0);
            ChatboxMenu.AddAction(0, delegate
            {
                ExploitHandler.isStaticChatboxEnabled = false;
                ExploitHandler.isSpotifyChatboxEnabled = false;
            });
            ChatboxMenu.AddAction(1, delegate
            {
                ExploitHandler.isStaticChatboxEnabled = false;
                ExploitHandler.isSpotifyChatboxEnabled = false;

                GameHelper.VRCUiPopupManager.AskInGameInput("Custom Text", "Ok", delegate (string text)
                {
                    ExploitHandler.StaticChatbox(text).Start();
                });
            });
            ChatboxMenu.AddAction(2, delegate
            {
                ExploitHandler.isStaticChatboxEnabled = false;
                ExploitHandler.isSpotifyChatboxEnabled = false;

                ExploitHandler.SpotifyChatbox().Start();
            });

            new QMToggleButton(ExploitPage, 2, 1, "Voice \nDistortion", delegate
            {
                ExploitHandler.VoiceDistortion().Start();
            }, delegate
            {
                ExploitHandler.isVoiceDistortionEnabled = false;
            }, "Earrape the Room with USpeak");

            new QMSingleButton(ExploitPage, 3, 1, "Infinity \nPortal", delegate
            {
                new VRC.Core.ApiWorldInstance() { id = $"wrld_5b89c79e-c340-4510-be1b-476e9fcdedcc:{EncryptUtils.RandomStringNumber(5)}" }.Fetch(new Action<VRC.Core.ApiContainer>((container) =>
                {
                    VRC.Core.ApiModelContainer<VRC.Core.ApiWorldInstance> apiWorldInstance = new();
                    apiWorldInstance.setFromContainer(container);
                    VRC.Core.ApiWorldInstance World = container.Model.Cast<VRC.Core.ApiWorldInstance>();

                    if (World != null) PhotonHelper.RaisePortalCreate(World.shortName, UnityUtils.InfPosition.INFBypass, -1);
                }));
            }, "Spawn a Portal at Infinity", ButtonAPI.ButtonSize.Half);

            new QMSingleButton(ExploitPage, 3, 1.5f, "Unicode \nChat", delegate
            {
                PhotonHelper.RaiseChatMessage("\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v\v");
            }, "Send a Unicode Chatbox Message", ButtonAPI.ButtonSize.Half);

            new QMSingleButton(ExploitPage, 4, 1, "Custom \nEmoji", delegate
            {
                GameHelper.VRCUiPopupManager.AskInGameInput("File ID", "Ok", delegate (string text)
                {
                    PhotonHelper.RaiseEmojiCreate(text);
                }, "file_");
            }, "Spawn a custom Emoji", ButtonAPI.ButtonSize.Half);

            new QMSingleButton(ExploitPage, 4, 1.5f, "Infinity \nItems", delegate
            {
                ItemHelper.ItemsToPosition(UnityUtils.InfPosition.INFBypass);
            }, "Teleport Items to Infinity", ButtonAPI.ButtonSize.Half);

            new QMToggleButton(ExploitPage, 1, 2, "Memory \nOverflow", delegate
            {
                ExploitHandler.MemoryViolation().Start();
            }, delegate
            {
                ExploitHandler.isMemoryViolation = false;
            }, "Override Events with Memory Crashers");

            QMSelectButton AntiPickpMenu = new(ExploitPage, 2, 2, "Anti \nPickup", "Prevent Players from using Pickups", InternalSettings.AntiPickup, ConfigManager.Ini.GetInt("Toggles", "AntiPickupMode"));
            AntiPickpMenu.AddAction(0, delegate
            {
                ConfigManager.Ini.SetInt("Toggles", "AntiPickupMode", 0);
                InternalSettings.AntiPickup = InternalSettings.AntiPickupMode.None;
            });
            AntiPickpMenu.AddAction(1, delegate
            {
                ConfigManager.Ini.SetInt("Toggles", "AntiPickupMode", 1);
                InternalSettings.AntiPickup = InternalSettings.AntiPickupMode.Self;
                //foreach (VRC_Pickup Item in ItemHandler.GetAllPickups()) // Ghetto as shit, rework that at some point, if set to nobody the onevent will override it anyways so this works but is extremly shit...
                //{
                //    ItemHandler.TakeOwnershipIfNecessary(Item.gameObject);
                //}
            });
            AntiPickpMenu.AddAction(2, delegate
            {
                ConfigManager.Ini.SetInt("Toggles", "AntiPickupMode", 2);
                InternalSettings.AntiPickup = InternalSettings.AntiPickupMode.Nobody;
                //foreach (VRC_Pickup Item in ItemHandler.GetAllPickups()) // Ghetto as shit, rework that at some point, if set to nobody the onevent will override it anyways so this works but is extremly shit...
                //{
                //    ItemHandler.TakeOwnershipIfNecessary(Item.gameObject);
                //}
            });

            QMSelectButton InterestMenu = new(ExploitPage, 3, 2, "Custom \nInterest", "Receive Player events regardless of their State", InternalSettings.CustomInterest, ConfigManager.Ini.GetInt("Toggles", "CustomInterestMode"));
            InterestMenu.AddAction(0, delegate
            {
                ConfigManager.Ini.SetInt("Toggles", "CustomInterestMode", 0);
                InternalSettings.CustomInterest = InternalSettings.InterestMode.None;
            });
            InterestMenu.AddAction(1, delegate
            {
                ConfigManager.Ini.SetInt("Toggles", "CustomInterestMode", 1);
                InternalSettings.CustomInterest = InternalSettings.InterestMode.Reversed;
            });
            InterestMenu.AddAction(2, delegate
            {
                ConfigManager.Ini.SetInt("Toggles", "CustomInterestMode", 2);
                InternalSettings.CustomInterest = InternalSettings.InterestMode.All;
            });

            new QMToggleButton(ExploitPage, 4, 2, "Invisible \nConnect", delegate
            {
                InternalSettings.InvisibleConnect = true;
            }, delegate
            {
                InternalSettings.InvisibleConnect = false;
            }, "Connect to a Room without appearing");
        }
    }
}
